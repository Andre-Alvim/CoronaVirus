{"version":3,"sources":["globalStyle.js","styles.js","components/Country/styles.js","components/CountryImage/index.js","components/Country/index.js","components/MapWrapper/MapContext.js","components/MapMarker/index.js","components/Map/index.js","components/MapWrapper/styles.js","components/CountryMap/styles.js","components/CountryMap/index.js","components/MapWrapper/index.js","components/Loading/styles.js","components/Spinner/styles.js","components/Spinner/index.js","components/Loading/index.js","App.js","index.js"],"names":["createGlobalStyle","Container","styled","main","Board","section","li","ImageWrap","div","Image","Info","CountryImage","name","useState","photo","setPhoto","useEffect","a","fetch","response","json","data","src","alpha2Code","alt","loadPhoto","Country","country","cases","todayCases","deaths","recovered","active","critical","casesPerOneMillion","MapContext","createContext","setCountry","value","MapMarker","latlng","lat","lng","coronaCountry","useContext","key","Math","random","position","onClick","memo","withScriptjs","withGoogleMap","countries","mapCountries","setMapCountries","Promise","all","map","loadMapCapitals","defaultZoom","defaultCenter","filter","MapWrap","CountryMap","MapWrapper","children","Provider","Svg","svg","Circle","circle","Spinner","viewBox","xmlns","cx","cy","r","Loading","App","setCountries","loading","setLoading","loadCountries","memorizedCountries","useMemo","googleMapURL","loadingElement","containerElement","style","height","width","mapElement","ReactDOM","render","document","getElementById"],"mappings":"6jBAEeA,kBAAf,K,qVCAO,IAAMC,EAAYC,IAAOC,KAAV,KAUTC,EAAQF,IAAOG,QAAV,K,wuBCVX,IAAMJ,EAAYC,IAAOI,GAAV,KAOTC,EAAYL,IAAOM,IAAV,KAMTC,EAAQP,IAAOM,IAAV,KASLE,EAAOR,IAAOM,IAAV,KCGFG,MAzBf,YAAiC,IAATC,EAAQ,EAARA,KAAQ,EACJC,mBAAS,MADL,mBACvBC,EADuB,KAChBC,EADgB,KAsB9B,OAnBAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACyBC,MAAM,yCAAD,OACeN,IAF7C,cACQO,EADR,gBAIqBA,EAASC,OAJ9B,OAIQC,EAJR,OAMEN,EACEM,EAAK,IACH,yBACEC,IAAG,sCAAiCD,EAAK,GAAGE,WAAzC,gBACHC,IAAI,aAVZ,4CADc,uBAAC,WAAD,wBAgBdC,MAGKX,GAAS,MCMHY,MAxBf,YAA+B,IAAZC,EAAW,EAAXA,QACjB,OACE,kBAAC,EAAD,KACE,kBAAClB,EAAD,KACE,kBAACF,EAAD,KACE,kBAAC,EAAD,CAAcK,KAAMe,EAAQA,YAGhC,kBAACjB,EAAD,KACE,4BAAKiB,EAAQA,SACb,6BACE,8CAAoBA,EAAQC,OAC5B,+CAAqBD,EAAQE,YAC7B,oDAA0BF,EAAQG,QAClC,6CAAmBH,EAAQI,WAC3B,wCAAcJ,EAAQK,QACtB,mDAAsBL,EAAQM,UAC9B,qDAAwBN,EAAQO,wB,QChB3BC,EALIC,wBAAc,CAC/BC,WAAY,SAAAC,GAAK,OAAI,MACrBX,QAAS,OCkBIY,MAlBf,YAKI,IAAD,gBAJDZ,QACEa,OAGD,GAHUC,EAGV,KAHeC,EAGf,KADDC,EACC,EADDA,cAEQN,EAAeO,qBAAWT,GAA1BE,WACR,OACE,kBAAC,SAAD,CACEQ,IAAG,UAAKC,KAAKC,UACbC,SAAU,CAAEP,MAAKC,OACjBO,QAAS,WACPZ,EAAWM,OC4BJO,qBAAKC,uBAAaC,yBAxCjC,YAA6B,IAAdC,EAAa,EAAbA,UAAa,EACcxC,mBAAS,IADvB,mBACnByC,EADmB,KACLC,EADK,KAoB1B,OAjBAvC,qBAAU,WAAM,4CACd,sBAAAC,EAAA,kEACEsC,EADF,SAEUC,QAAQC,IACZJ,EAAUK,IAAV,uCAAc,WAAM/B,GAAN,iBAAAV,EAAA,sEACWC,MAAM,yCAAD,OACeS,EAAQA,UAFvC,cACNR,EADM,gBAIOA,EAASC,OAJhB,cAINC,EAJM,yBAKLA,EAAK,IAAM,MALN,2CAAd,wDAHN,8EADc,uBAAC,WAAD,wBAcdsC,KACC,CAACN,IAGF,kBAAC,YAAD,CAAWO,YAAa,EAAGC,cAAe,CAAEpB,KAAM,OAAQC,IAAK,UAC5DY,EAAaI,KACZ,SAAA/B,GAAO,OACLA,GACE,kBAAC,EAAD,CACEkB,IAAKC,KAAKC,SACVpB,QAASA,EACTgB,cACEU,EAAUS,QACR,SAAAnB,GAAa,OAAIA,EAAchB,UAAYA,EAAQf,QACnD,IAAM,c,qaCjCjB,IAAMX,EAAYC,IAAOM,IAAV,KAUTuD,EAAU7D,IAAOM,IAAV,K,wFCVb,IAAMP,EAAYC,IAAOM,IAAV,KC8BPwD,MA1Bf,WAAuB,IACbrC,EAAYiB,qBAAWT,GAAvBR,QAER,OACE,kBAAC,EAAD,KACGA,EACC,oCACE,kBAAC,EAAD,CAAcf,KAAMe,EAAQA,UAC5B,4BAAKA,EAAQA,SACb,6BACE,8CAAoBA,EAAQC,OAC5B,+CAAqBD,EAAQE,YAC7B,oDAA0BF,EAAQG,QAClC,6CAAmBH,EAAQI,WAC3B,wCAAcJ,EAAQK,QACtB,mDAAsBL,EAAQM,UAC9B,qDAAwBN,EAAQO,sBAIpC,oDCRO+B,MAbf,YAAmC,IAAbC,EAAY,EAAZA,SAAY,EACFrD,mBAAS,MADP,mBACzBc,EADyB,KAChBU,EADgB,KAGhC,OACE,kBAAC,EAAW8B,SAAZ,CAAqB7B,MAAO,CAAEX,UAASU,eACrC,kBAAC,EAAD,KACE,kBAAC0B,EAAD,KAAUG,GACV,kBAAC,EAAD,S,2KCVD,IAAMjE,EAAYC,IAAOM,IAAV,K,woCCAf,IAAMP,EAAYC,IAAOM,IAAV,KAMT4D,EAAMlE,IAAOmE,IAAV,KAYHC,EAASpE,IAAOqE,OAAV,KCNJC,MAVf,WACE,OACE,kBAAC,EAAD,KACE,kBAACJ,EAAD,CAAKK,QAAQ,cAAcC,MAAM,8BAC/B,kBAACJ,EAAD,CAAQK,GAAG,KAAKC,GAAG,KAAKC,EAAE,UCInBC,MARf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCiDSC,MA/Cf,WAAgB,IAAD,EACqBlE,mBAAS,IAD9B,mBACNwC,EADM,KACK2B,EADL,OAEiBnE,oBAAS,GAF1B,mBAENoE,EAFM,KAEGC,EAFH,KAIblE,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACyBC,MACrB,sDAFJ,cACQC,EADR,gBAIqBA,EAASC,OAJ9B,OAIQC,EAJR,OAME2D,EAAa3D,GACb6D,GAAW,GAPb,4CADc,uBAAC,WAAD,wBAUdC,KACC,IAEH,IAAMC,EAAqBC,mBAAQ,WACjC,OAAOhC,EAAUK,KAAI,SAAA/B,GAAO,OAC1B,kBAAC,EAAD,CAASkB,IAAKlB,EAAQA,QAASA,QAASA,SAEzC,CAAC0B,IAEJ,OACE,oCACE,kBAACpD,EAAD,KACE,kEAEA,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEoD,UAAWA,EACXiC,aAAa,oFACbC,eAAgB,kBAAC,EAAD,MAChBC,iBACE,yBAAKC,MAAO,CAAEC,OAAO,QAAUC,MAAM,UAEvCC,WAAY,yBAAKH,MAAO,CAAEC,OAAO,aAIrC,kBAACtF,EAAD,KAAQ6E,EAAU,kBAAC,EAAD,MAAc,4BAAKG,KAEvC,kBAAC,EAAD,QC/CNS,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.921f2ccc.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport default createGlobalStyle`\n    html, body, #root {\n        background: #f9f9f9;\n        height: 100%;\n    }\n\n    #root {\n        font-family: \"Roboto\", sans-serif;\n    }\n\n    * {\n        color: #333;\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n    }\n`;\n","import styled from \"styled-components\";\n\nexport const Container = styled.main`\n  padding: 0px 1em;\n  max-width: 1020px;\n  margin: auto;\n  min-width: 300px;\n  h1 {\n    margin: 1em 0px;\n  }\n`;\n\nexport const Board = styled.section`\n  display: flex;\n  width: 100%;\n  height: 300px;\n  ul {\n    width: 100%;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const Container = styled.li`\n  box-shadow: 0 2px 3px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(0, 0, 0, 0.05);\n  display: flex;\n  margin: 1em 0px;\n  padding: 8px;\n`;\n\nexport const ImageWrap = styled.div`\n  box-shadow: 0 2px 3px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(0, 0, 0, 0.05);\n  padding: 1.5em;\n  border-radius: 50%;\n`;\n\nexport const Image = styled.div`\n  width: 180px;\n  display: flex;\n  justify-content: center;\n  div {\n    margin: auto;\n  }\n`;\n\nexport const Info = styled.div`\n  h2 {\n    font-size: 28px;\n  }\n  div {\n    margin-left: 3px;\n    opacity: 0.9;\n    font-size: 14px;\n  }\n`;\n","import React, { useState, useEffect } from \"react\";\n\nfunction CountryImage({ name }) {\n  const [photo, setPhoto] = useState(null);\n\n  useEffect(() => {\n    async function loadPhoto() {\n      const response = await fetch(\n        `https://restcountries.eu/rest/v2/name/${name}`\n      );\n      const data = await response.json();\n\n      setPhoto(\n        data[0] && (\n          <img\n            src={`https://www.countryflags.io/${data[0].alpha2Code}/flat/64.png`}\n            alt=\"country\"\n          />\n        )\n      );\n    }\n    loadPhoto();\n  });\n\n  return photo || null;\n}\n\nexport default CountryImage;\n","import React from \"react\";\n\nimport { Container, Info, Image, ImageWrap } from \"./styles\";\n\nimport CountryImage from \"../CountryImage\";\n\nfunction Country({ country }) {\n  return (\n    <Container>\n      <Image>\n        <ImageWrap>\n          <CountryImage name={country.country} />\n        </ImageWrap>\n      </Image>\n      <Info>\n        <h2>{country.country}</h2>\n        <div>\n          <div>Casos totais: {country.cases}</div>\n          <div>Casos por dia: {country.todayCases}</div>\n          <div>Mortes confirmadas: {country.deaths}</div>\n          <div>Recuperados: {country.recovered}</div>\n          <div>Ativos: {country.active}</div>\n          <div>Estado crítico: {country.critical}</div>\n          <div>Casos por milhão: {country.casesPerOneMillion}</div>\n        </div>\n      </Info>\n    </Container>\n  );\n}\n\nexport default Country;\n","import { createContext } from \"react\";\n\nconst MapContext = createContext({\n  setCountry: value => null,\n  country: null\n});\n\nexport default MapContext;\n","import React, { useContext } from \"react\";\nimport { Marker } from \"react-google-maps\";\nimport MapContext from \"../MapWrapper/MapContext\";\n\nfunction MapMarker({\n  country: {\n    latlng: [lat, lng]\n  },\n  coronaCountry\n}) {\n  const { setCountry } = useContext(MapContext);\n  return (\n    <Marker\n      key={`${Math.random()}`}\n      position={{ lat, lng }}\n      onClick={() => {\n        setCountry(coronaCountry);\n      }}\n    />\n  );\n}\n\nexport default MapMarker;\n","import React, { useState, useEffect, memo } from \"react\";\nimport { GoogleMap, withGoogleMap, withScriptjs } from \"react-google-maps\";\nimport MapMarker from \"../MapMarker\";\n\nfunction Map({ countries }) {\n  const [mapCountries, setMapCountries] = useState([]);\n\n  useEffect(() => {\n    async function loadMapCapitals() {\n      setMapCountries(\n        await Promise.all(\n          countries.map(async country => {\n            const response = await fetch(\n              `https://restcountries.eu/rest/v2/name/${country.country}`\n            );\n            const data = await response.json();\n            return data[0] || null;\n          })\n        )\n      );\n    }\n    loadMapCapitals();\n  }, [countries]);\n\n  return (\n    <GoogleMap defaultZoom={3} defaultCenter={{ lat: -34.397, lng: 150.644 }}>\n      {mapCountries.map(\n        country =>\n          country && (\n            <MapMarker\n              key={Math.random()}\n              country={country}\n              coronaCountry={\n                countries.filter(\n                  coronaCountry => coronaCountry.country === country.name\n                )[0] || {}\n              }\n            />\n          )\n      )}\n    </GoogleMap>\n  );\n}\n\nexport default memo(withScriptjs(withGoogleMap(Map)));\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  box-shadow: 0 2px 3px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(0, 0, 0, 0.05);\n  display: flex;\n  min-height: 400px;\n  height: fit-content;\n  @media (max-width: 1020px) {\n    flex-direction: column;\n  }\n`;\n\nexport const MapWrap = styled.div`\n  width: 650px;\n  @media (max-width: 1020px) {\n    width: 100%;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  padding: 1em;\n`;\n","import React, { useContext } from \"react\";\n\nimport MapContext from \"../MapWrapper/MapContext\";\nimport { Container } from \"./styles\";\nimport CountryImage from \"../CountryImage\";\n\nfunction CountryMap() {\n  const { country } = useContext(MapContext);\n\n  return (\n    <Container>\n      {country ? (\n        <>\n          <CountryImage name={country.country} />\n          <h2>{country.country}</h2>\n          <div>\n            <div>Casos totais: {country.cases}</div>\n            <div>Casos por dia: {country.todayCases}</div>\n            <div>Mortes confirmadas: {country.deaths}</div>\n            <div>Recuperados: {country.recovered}</div>\n            <div>Ativos: {country.active}</div>\n            <div>Estado crítico: {country.critical}</div>\n            <div>Casos por milhão: {country.casesPerOneMillion}</div>\n          </div>\n        </>\n      ) : (\n        <h2>Escolha um país</h2>\n      )}\n    </Container>\n  );\n}\n\nexport default CountryMap;\n","import React, { useState } from \"react\";\nimport { Container, MapWrap } from \"./styles\";\nimport MapContext from \"./MapContext\";\nimport CountryMap from \"../CountryMap\";\n\nfunction MapWrapper({ children }) {\n  const [country, setCountry] = useState(null);\n\n  return (\n    <MapContext.Provider value={{ country, setCountry }}>\n      <Container>\n        <MapWrap>{children}</MapWrap>\n        <CountryMap />\n      </Container>\n    </MapContext.Provider>\n  );\n}\n\nexport default MapWrapper;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  flex: 1 1 auto;\n  display: flex;\n  justify-content: center;\n  > div {\n    margin: auto;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  width: 100px;\n  height: 100px;\n  /* margin: auto; */\n`;\n\nexport const Svg = styled.svg`\n  animation: 2s linear infinite both rotateSvg;\n  @keyframes rotateSvg {\n    0% {\n      transform: rotateZ(0deg);\n    }\n    100% {\n      transform: rotateZ(360deg);\n    }\n  }\n`;\n\nexport const Circle = styled.circle`\n  animation: 2s ease-in-out infinite both rotate;\n  stroke-linecap: round;\n  transform-origin: 50% 50%;\n  stroke-dasharray: 75;\n  stroke: #333;\n  stroke-width: 6;\n  fill: transparent;\n\n  @keyframes rotate {\n    0%,\n    25% {\n      stroke-dashoffset: getDashValue(45, 97%);\n      transform: rotate(0);\n    }\n    50%,\n    75% {\n      stroke-dashoffset: getDashValue(45, 25%);\n      transform: rotate(45deg);\n    }\n    100% {\n      stroke-dashoffset: getDashValue(45, 97%);\n      transform: rotate(360deg);\n    }\n  }\n\n  @function getDashValue($rad, $percent) {\n    $circumference: 2 * 3.14 * $rad;\n    $decPercent: $percent / 100%;\n    @return $circumference * $decPercent;\n  }\n`;\n","import React from \"react\";\n\nimport { Container, Circle, Svg } from \"./styles\";\n\nfunction Spinner() {\n  return (\n    <Container>\n      <Svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n        <Circle cx=\"50\" cy=\"50\" r=\"45\" />\n      </Svg>\n    </Container>\n  );\n}\n\nexport default Spinner;\n","import React from \"react\";\nimport { Container } from \"./styles\";\nimport Spinner from \"../Spinner\";\n\nfunction Loading() {\n  return (\n    <Container>\n      <Spinner />\n    </Container>\n  );\n}\n\nexport default Loading;\n","import React, { useEffect, useState, useMemo } from \"react\";\n\nimport GlobalStyle from \"./globalStyle\";\nimport { Container, Board } from \"./styles\";\nimport Country from \"./components/Country\";\nimport Map from \"./components/Map\";\nimport MapWrapper from \"./components/MapWrapper\";\nimport Loading from \"./components/Loading\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function loadCountries() {\n      const response = await fetch(\n        \"https://coronavirus-19-api.herokuapp.com/countries\"\n      );\n      const data = await response.json();\n\n      setCountries(data);\n      setLoading(false);\n    }\n    loadCountries();\n  }, []);\n\n  const memorizedCountries = useMemo(() => {\n    return countries.map(country => (\n      <Country key={country.country} country={country} />\n    ));\n  }, [countries]);\n\n  return (\n    <>\n      <Container>\n        <h1>Casos de Coronavírus pelo mundo</h1>\n\n        <MapWrapper>\n          <Map\n            countries={countries}\n            googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\"\n            loadingElement={<Loading />}\n            containerElement={\n              <div style={{ height: `400px`, width: `100%` }} />\n            }\n            mapElement={<div style={{ height: `100%` }} />}\n          />\n        </MapWrapper>\n\n        <Board>{loading ? <Loading /> : <ul>{memorizedCountries}</ul>}</Board>\n      </Container>\n      <GlobalStyle />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}